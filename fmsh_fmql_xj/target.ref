\" fmsh_fmql/target.ref - FMSH FMQL target specific documentation
\"
\" Copyright (c) 2011-2015 Wind River Systems, Inc.
\"
\" The right to copy, distribute, modify or otherwise make use
\" of this software may be licensed only pursuant to the terms
\" of an applicable Wind River license agreement.
\"
\" modification history
\" --------------------
\" 010,11jul19,l_l  created.
\"
\TITLE fmsh_fmql - FMSH FMQL

\sh NAME
`FMSH FMQL board with CortexA7 MPCore'

EXTERNAL DEPENDENCIES
None

INTRODUCTION
This section includes getting-started information, including subsections
detailing ROM installation, boot ROM flash instructions, and jumper
settings for VxWorks operation.

\sh USB2UART
This section will guide you how to connect uart on the FMSH FMQL board.
The board uart is usb port, the USB2UART driver need to install on host.


1. Configuring Boot Option Switches

Default Switch Settings:


1.1 Boot from QSPI
\ts
Switch Number          | Switch ON           | Switch OFF
--------------------------------------------------
SW3                    | 4                   | 1,2,3

\te

1.2 Boot from SD card
\ts
Switch Number          | Switch ON           | Switch OFF
--------------------------------------------------
SW3                    | 3,4                 | 1,2

\te

2. Configuring Serial Connection

   On the PC, start a terminal emulator program such as
   TeraTerm or HyperTerm to talk to the connected PC
   port with the following settings (connect to UART on
   target board, see board layout at the end of this
   document):

    Baud Rate   : 115200
    Data        : 8 bit
    Parity      : None
    Stop        : 1 bit
    Flow Control: None

3. Building the image

3.1 Create BOOT.BIN

  The VxWorks FSBL needs to be packaged by a FMSH tool 'Procise' 
  before programming to the SD card. 

3.2 Boot from SD card
   Copy BOOT.BIN to the root directory of a SD card.

   Insert the SD card and power up the board, you will get VxWorks bootrom running.

3.3 Programming on board QSPI FLASH

    Rename BOOT.Bin to bootrom.bin, then copy u-boot BOOT.BIN to the root directory
    of a SD card. Type the following commands in the U-Boot shell.

\cs
    mmcinfo;fatload mmc 0 0x10000000 bootrom.bin
    sf probe 0
    sf erase 0 0x0100000
    sf write 0x10000000 0 0x0FFFFF
\ce

    Note: if the bootrom size exceeds 0x100000 (1M), you should erase
    one or more sectors and program more data to flash, for example:

\cs
    sf erase 0 0x0200000
    sf write 0x10000000 0 0x1FFFFF
\ce

    change the switch settings to boot from qspi flash setting and reset board.

FEATURES

This section describes all features of the board, supported or not.
It documents all configurations of the board and the interaction between
features and configuration items.

\sh Supported Features

\sh List of hardware features (QL45 Demo board)

\ts
Hardware Interface       | Controller      | Driver/Component           | Status
-----------------------------------------------------------------------------------
UART                     | on-chip         | DRV_SIO_NS16550            | SUPPORTED
10/100/1000MB-ETHERNET   | on-chip         | INCLUDE_ALT_SOC_GEN5_DW_END| SUPPORTED
TIMER                    | on-chip         | INCLUDE_ALT_SOC_GEN5_TIMER | SUPPORTED
I2C                      | on-chip         | INCLUDE_ALT_SOC_GEN5_DW_I2C| SUPPORTED
GPIO                     | on-chip         | INCLUDE_FMSH_FMQL_GPIO     | SUPPORTED

\te

\sh Feature Interactions
Refer to the board vendor's documentation.

HARDWARE DETAILS
This section discusses memory maps for each bus.

\sh Memory Maps
The default memory map of this BSP is as bellows:

\ts
Start       | Size  | End         | Access to
---------------------------------------------
0x0002_0000 | 256KB | 0x0005_FFFF | SRAM
0x0010_0000 | 1023M | 0x3FFF_FFFF | DDR3 SDRAM
0x4000_0000 | 1GB   | 0x7FFF_FFFF | PL
0x8000_0000 | 1GB   | 0xBFFF_FFFF | PL
0xE000_0000 | 32MB  | 0xE1FF_FFFF | I/O PERIPHERALS
0xF800_0000 | 32MB  | 0xF9FF_FFFF | QSPI FLASH
\te


\sh Serial Configuration
There are one serial ports on the board, provided by two UARTs.
The default configuration is:

\ts
    Baud Rate   : 115200
    Data        : 8 bit
    Parity      : None
    Stop        : 1 bit
    Flow Control: None
\te

\sh Network and MAC address
The Gigabit Ethernet MAC is implemented in the FMSH FMQL SOC. The current
GEM hardware supports 10mbs/100mbps/1000mbps.

\sh SD memory card controller
The on chip SD/SDIO peripheral controller is supported for standard
capacity SD memory cards.

To use SD, file system configuration is usually needed. Please refer to
"Block Device File System Configuration" chapter below for more details
about how to use SD on VxWorks file system.


\sh SMP

VxWorks SMP(Symmetric Multiprocessing) configuration can be used on this
multiprocessor hardware platform supported by this BSP. Please refer to
the chapter "VxWorks SMP" of vxworks_kernel_programmers_guide_6.x.pdf for
more details about the SMP-specific features from software and hardware view.

Here we list some key features of SMP.

1. SMP build

   VxWorks SMP can be configured and built using the standard Wind River
   Workbench and vxprj facilities. VxWorks SMP images cannot be created with the
   legacy BSP directory configuration and build method (using config.h and make).

2. MMU

   VxWorks SMP does not support MMU-less configuration.

3. Cache and bus snoop

   Snoop logic is specific to the hardware architecture, but it's usually supported
   by a multiprocessor hardware platform.

   Cache can not be disabled in a VxWorks SMP system. I.e, function cacheDisable()
   directly returns error and does nothing.

   Only copy-back mode is tested and supported officially by WindRiver BSP and VxWorks
   kernel for SMP system and this is the default configuration in BSP. So system may has
   unpredictable behavior if you decide to change the cache mode from copy-back to
   write-through. In addition, there are some other reasons for this restriction. For
   example, write-through is not supported by VxWorks for PowerPC processors because of
   the atomic operation, and neither does ARM because of the hardware implementation.

4. Interrupt CPU affinity

   Hardware resources can be allocated via VxWorks configuration. Here we focus on the
   interrupt to show how it's implemented. SMP hardware usually requires programmable
   interrupt controller. VxWorks SMP makes use of this hardware to allow assignment
   interrupts to a specific CPU. By default, interrupts are routed to the VxWorks
   instance's logical CPU 0. Interrupt CPU affinity can be useful for load balancing,
   for example, if there is too much total interrupt traffic for one CPU to handle.

   For example, in hwconf.c of this BSP, there is the following data structure:

   struct intrCtlrCpu gicCpu[] = {
       { INT_VEC_ETH0, 0 },
   };

   User can reroute the Ethernet interface interrupt to other CPUs by changing 0 to
   1 or other CPU index.

5. CPU number

   VxWorks project parameter, VX_SMP_NUM_CPUS, is used to represent the CPUs which
   get involved in the SMP system, as VxWorks supports part of all the CPUs to participate
   the SMP system and the rests keep reset or idle. The CPU number we are discussing here
   includes all the hardware units which have the same behavior as CPU, for example, the
   thread, hyper-thread, etc.

   The maximum CPU number of this BSP is 4.

\sh Known Issue

1. The Ethernet port does not support hot-plug if use gun compiler build, the diab compiler is normal.

2. Currently, the UART driver does not support modify the baud rate.

BOARD LAYOUT


\bs
demo board:
+--------------------------+------+-----------+--------+-----------------------+
|                          | USB  |           | HDMI   |                       |
+--+                       +------+           +--------+                    +--+
|  |POWER                                                         FPGA UART |  | 
+--+                                                                        +--+ 
|                                                                              |
|                                                                           +--+ 
|                                                                      UART |  | 
|                           +----------+   +-----------+                    +--+ 
|                           | SW3      |   |   Demo    |                       | 
|                           +----------+   |           |                    +--+ 
|                           +----------+   |   CORE    |              JATG  |  | 
|                           | SW4      |   |           |                    +--+ 
|                           +----------+   |           |                       | 
|                                          +-----------+                       |
+                                                                              | 
|                                                                              | 
|                                                                              | 
+---+                                                                          | 
|   |HDMI                                                                      | 
|   |                                                                          | 
+---+                 +--------+            +--------+                         | 
|                     |  GEM   |            |    SD  |                         | 
+------------------------------------------------------------------------------|

\be


WEB RESOURCES

Much of the ARM documentation can be found on line. The following
URL was correct at the time of writing for semiconductor area. You'll have to
search the documentation using processor name for specific documentation.

http://www.arm.com/

SEE ALSO

\tb Wind River Workbench User's Guide

\tb VxWorks Kernel Programmer's Guide

\tb VxWorks Architecture Supplement

