/****************************************************************************/
/**
*
* @file ps_init.h
*
* This file is automatically generated
*
*****************************************************************************/


#ifdef __cplusplus
extern "C" {
#endif

#define SLCR_REG_BASE      (0xE0026000)

#define DDR_UMC_REG_BASE   (0xE0029000)
#define DDR_PUB_REG_BASE   (0xE0027000)
#define DDR_ECC_REG_BASE   (0xE0026000)

#define OPCODE_EXIT       0U
#define OPCODE_CLEAR      1U
#define OPCODE_WRITE      2U
#define OPCODE_MASKWRITE  3U
#define OPCODE_MASKPOLL   4U
#define OPCODE_MASKDELAY  5U
#define NEW_PS_ERR_CODE   1
#define OPCODE_MASKCOPY   6U


#define PS_INIT_SUCCESS         (0)
#define PS_INIT_CORRUPT         (1)
#define PS_INIT_TIMEOUT         (2)
#define PS_POLL_FAILED_DDR_INIT (3)
#define PS_POLL_FAILED_DMA      (4)
#define PS_POLL_FAILED_PLL      (5)

#define PS_MASK_POLL_TIME 100000000

#if 0
#define APU_FREQ 660000000
#define DDR_FREQ 400000000
#define QSPI_FREQ 100000000
#define ENET0_FREQ 100000000
#define ENET1_FREQ 100000000
#define SDIO_FREQ 100000000
#define UART_FREQ 100000000
#define SPI_FREQ 100000000
#define FPGA0_FREQ 100000000
#define FPGA1_FREQ 100000000
#define FPGA2_FREQ 100000000
#define FPGA3_FREQ 100000000
#define WDT_FREQ 82500000
#define TTC0_0_FREQ 82500000
#define TTC0_1_FREQ 82500000
#define TTC0_2_FREQ 82500000
#define TTC1_0_FREQ 82500000
#define TTC1_1_FREQ 82500000
#define TTC1_2_FREQ 82500000
#endif

#if 0  /*sdmmc, qspi, spi, can, nfc*/

#define APU_FREQ   660000000
#define DDR_FREQ   400000000
#define QSPI_FREQ  100000000

#define ENET0_FREQ 100000000
#define ENET1_FREQ 100000000

#define SDIO_FREQ  100000000
#define UART_FREQ  100000000
#define SPI_FREQ   100000000

#define FPGA0_FREQ 100000000
#define FPGA1_FREQ 100000000
#define FPGA2_FREQ 100000000
#define FPGA3_FREQ 100000000

#define WDT_FREQ    82500000

#define TTC0_0_FREQ 82500000
#define TTC0_1_FREQ 82500000
#define TTC0_2_FREQ 82500000
#define TTC1_0_FREQ 82500000
#define TTC1_1_FREQ 82500000
#define TTC1_2_FREQ 82500000

#define CAN_FREQ    41250000
#define I2C_FREQ    82500000

#endif

#if 1  /* devc */

#define APU_FREQ  666666660
#define DDR_FREQ  399999996
#define QSPI_FREQ 199999998

#define ENET0_FREQ 100000000
#define ENET1_FREQ 100000000

#define SDIO_FREQ  99999999
#define UART_FREQ  99999999
#define SPI_FREQ   100000000

#define FPGA0_FREQ  49999999
#define FPGA1_FREQ  100000000
#define FPGA2_FREQ  100000000
#define FPGA3_FREQ  100000000

#define WDT_FREQ    83333332

#define TTC0_0_FREQ 83333332
#define TTC0_1_FREQ 83333332
#define TTC0_2_FREQ 83333332
#define TTC1_0_FREQ 83333332
#define TTC1_1_FREQ 83333332
#define TTC1_2_FREQ 83333332

#define PS_CLK_FREQ 33333333

#define CAN_FREQ    41666666

#define I2C_FREQ    83333332   /* APB_clk --> I2C_clk : ((33.33MHz * 2(倍频)) / 8(分频)) = 83.33M Hz  (4:2:1)
							      33.33MHz * 2(倍频)    : PS_APU 主频
							      8(分频)               : PS_APU -> AXI -> AHB -> APB, 三级总线分频总倍数   
							      -------
							      APB_clk --> I2C_clk : ((33.33MHz * 2(倍频)) / 12(分频)) = 5.55M Hz      (6:2:1)
							   */

#endif


/* Encode number of arguments in last nibble */
#define EMIT_EXIT()                   ( (OPCODE_EXIT      << 4 ) | 0 )
#define EMIT_CLEAR(addr)              ( (OPCODE_CLEAR     << 4 ) | 1 ) , addr
#define EMIT_WRITE(addr,val)          ( (OPCODE_WRITE     << 4 ) | 2 ) , addr, val
#define EMIT_MASKWRITE(addr,mask,val) ( (OPCODE_MASKWRITE << 4 ) | 3 ) , addr, mask, val
#define EMIT_MASKPOLL(addr,mask)      ( (OPCODE_MASKPOLL  << 4 ) | 2 ) , addr, mask
#define EMIT_MASKDELAY(addr,mask)     ( (OPCODE_MASKDELAY << 4 ) | 2 ) , addr, mask
#define EMIT_MASKCOPY(addrsrc,addrdst,masksrc,maskdst) \
                     ( (OPCODE_MASKCOPY << 4 ) | 4 ) , addrsrc, addrdst, masksrc, maskdst
int ps_config(unsigned long*);
int ps_init();
int ps_post_config();
int ps_debug();
char* getPSMessageInfo(unsigned key);



#define FPS_NFC_SAMPLE_DELAY          0  /* 0 cycles */
#define FPS_NFC_TIMING_TWHR           12 /* 60ns */
#define FPS_NFC_TIMING_TRHW           20 /* 100ns */
#define FPS_NFC_TIMING_TADL           14 /* 70ns */
#define FPS_NFC_TIMING_TCCS           2  /* not defined */
#define FPS_NFC_TIMING_TWW            20 /* 100ns */
#define FPS_NFC_TIMING_TRR            4  /* 20ns */
#define FPS_NFC_TIMING_TWB            20 /* (max)100ns */
#define FPS_NFC_TIMING_TRWH           2  /* 10ns */
#define FPS_NFC_TIMING_TRWP           4  /* 12ns */

#if 1
/** Maximum number of blocks in a device */
#define NAND_MAX_BLOCKS                      (2048) /*2048 */

/** Maximum number of pages in one block */
#define NAND_MAX_PAGES_1BLK                  (64) /*256 */

/**Maximum size of the data area of one page, in bytes. */
#define NAND_MAX_PAGE_DATASIZE               (2048) /*4096 */

/** Maximum size of the spare area of one page, in bytes. */
#define NAND_MAX_PAGE_SPARESIZE              (64) /*128*/ /*256 */

/** Maximum number of ecc bytes stored in the spare for one single page. */
#define NAND_MAX_SPARE_ECCBYTES              (48) /*24 */

#define NAND_MAX_BADBLKS                     (104)  

#define NFCPS_ECC_HW_OFFSET                  (0x20)

#endif



#if 1
/* 
nandflash cmd idx 
*/
#define NAND_SPANSION_ID                             0x01
#define NAND_MICRON_ID                               0x2C
#define NAND_FMSH_ID                                 0xA1

#define NANDFLASH_ONFI_ID                           0x49464E4F 

/* Reset commands */

#define NANDFLASH_RESET                         0
#define NANDFLASH_SYNCH_RESET                   1
#define NANDFLASH_LUN_RESET                     2

/* Identification operations  */
#define NANDFLASH_READ_ID                       3
#define NANDFLASH_READ_PARAMETER_PAGE           4
#define NANDFLASH_UNIQUE_ID                     5

/* Configuration operations */
#define NANDFLASH_GET_FEATURE                   6
#define NANDFLASH_SET_FEATURE                   7

/* Status Operations  */
#define NANDFLASH_READ_STATUS                   8
#define NANDFLASH_SELECT_LUN_WITH_STATUS        9
#define NANDFLASH_LUN_STATUS                    10
#define NANDFLASH_DEVICE_STATUS                 11
#define NANDFLASH_VOLUME_SELECT                 12

/* Column adress operations */
#define NANDFLASH_CHANGE_READ_COLUMN            13
#define NANDFLASH_SELECT_CACHE_REGISTER         14
#define NANDFLASH_CHANGE_WRITE_COLUMN           15
#define NANDFLASH_CHANGE_ROW_ADDRESS            16

/* Read operations */
#define NANDFLASH_READ_PAGE                     17
#define NANDFLASH_READ_PAGE_CACHE               18
#define NANDFLASH_READ_PAGE_CACHE_LAST          19
#define NANDFLASH_READ_MULTIPLANE               20
#define NANDFLASH_TWO_PLANE_PAGE_READ           21
#define NANDFLASH_QUEUE_PAGE_READ               22

/* Program operations */
#define NANDFLASH_PROGRAM_PAGE                  23
#define NANDFLASH_PROGRAM_PAGE_IMD              24
#define NANDFLASH_PROGRAM_PAGE_DEL              25 
#define NANDFLASH_PROGRAM_PAGE_1                26
#define NANDFLASH_PROGRAM_PAGE_CACHE            27
#define NANDFLASH_PROGRAM_MULTIPLANE            28
#define NANDFLASH_WRITE_PAGE                    29
#define NANDFLASH_WRITE_PAGE_CACHE              30
#define NANDFLASH_WRITE_MULTIPLANE              31

/* Erase operations */
#define NANDFLASH_ERASE_BLOCK                   32
#define NANDFLASH_ERASE_MULTIPLANE              33

/* Copyback operations */
#define NANDFLASH_COPYBACK_READ                 34
#define NANDFLASH_COPYBACK_PROGRAM              35
#define NANDFLASH_COPYBACK_PROGRAM_1            36
#define NANDFLASH_COPYBACK_MULTIPLANE           37

/* OTP operations */
#define NANDFLASH_PROGRAM_OTP                   38
#define NANDFLASH_DATA_PROTECT_OTP              39
#define NANDFLASH_READ_PAGE_OTP                 40

/*
nandflash cmd_idx to nfc_ctrl reg_val
*/
/*
typedef struct
{
	UINT32 cmd_idx;
	UINT32 reg_val;
} vxbT_CMDIDX_TO_REGVAL;
*/
#endif




#ifdef __cplusplus
}
#endif

